package TransportFile;

import java.net.*;
import java.io.*;
import java.util.*;
import java.util.logging.Logger;
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JTextField;
import java.awt.Font;
import javax.swing.JLabel;
import javax.swing.JTextArea;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

public class Server {

	private JFrame frame;
	private JTextField txtPort;
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Server window = new Server();
					window.frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the application.
	 */
	public Server() {
		initialize();
	}

	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {
		frame = new JFrame();
		frame.setBounds(100, 100, 450, 300);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.getContentPane().setLayout(null);
		
		txtPort = new JTextField();
		txtPort.setFont(new Font("Times New Roman", Font.PLAIN, 16));
		txtPort.setBounds(143, 22, 116, 29);
		frame.getContentPane().add(txtPort);
		txtPort.setColumns(10);
		
		JLabel lblNewLabel = new JLabel("Port :");
		lblNewLabel.setFont(new Font("Times New Roman", Font.PLAIN, 16));
		lblNewLabel.setBounds(87, 25, 46, 26);
		frame.getContentPane().add(lblNewLabel);
		
		JTextArea textArea = new JTextArea();
		textArea.setFont(new Font("Times New Roman", Font.PLAIN, 16));
		textArea.setBounds(10, 60, 414, 190);
		frame.getContentPane().add(textArea);
		
		JButton btnStart = new JButton("Start");
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				String test = txtPort.getText();
				if(test.equals(""))
					textArea.setText("Error");
				else
				{
					int SERVER_PORT = Integer.parseInt(test);
					ServerSocket serverSocket = null;
					 try {
				            serverSocket = new ServerSocket(SERVER_PORT);
				            textArea.setText("Binding to port " + SERVER_PORT + ", please wait  ...");
				            textArea.setText("Server started: " + serverSocket);
				            textArea.setText("Waiting for a client ...");
				            while (true) {
				                try {
				                    Socket socket = serverSocket.accept();
				                    textArea.setText("Client accepted: " + socket);
				                    
	
				                    Thread t = new Thread(new Transport(socket,textArea));
	
				                    t.start();
	
				                } catch (Exception e1) {
				                	textArea.setText(" Connection Error: " + e1);
				                }
				        } 
					 }
					 catch (Exception e1) 
					 	{
				            System.exit(1);
				        }
	
	
				    }
				}
			}
		);
		btnStart.setFont(new Font("Times New Roman", Font.PLAIN, 16));
		btnStart.setBounds(269, 21, 89, 30);
		frame.getContentPane().add(btnStart);
	}
}
