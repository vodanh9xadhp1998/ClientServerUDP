package FileServer;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Scanner;
import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;

public class Run {
	 public final static int SERVER_PORT = 7;
	public static void InputData(ArrayList<Student> students) {
		int n;
		Scanner sc = new Scanner(System.in);
		do {
			System.out.print("Ban co muon nhap them khong sinh vien khong..?\n(1)Co\n(0)Khong\nMoi ban chon: ");
			n = sc.nextInt();
			if (n == 1) 
			{
				Student student = new Student();
				student.InputStudent();
				students.add(student);
			}
		} while (n != 0);
	}

	public static void main(String[] args) throws IOException, ClassNotFoundException {
		ArrayList<Student> students = new ArrayList<Student>();
		ActionFile AF = new ActionFile();
		Scanner sc = new Scanner(System.in);
		students = AF.LoadFileStudent("DataStudent.dat");
		InputData(students);
		Collections.sort(students, new Comparator<Student>()
		{
			@Override
            public int compare(Student o1, Student o2) {
                if(o1.getMarkavge() - o2.getMarkavge() < 0)
                	return 1;
                else  if(o1.getMarkavge() - o2.getMarkavge() == 0)
                	return 0;
                else
                	return -1;
            }
		});
		AF.SaveFileStudent(students, "DataStudent.dat");
		System.out.println("Thong tin sinh vien..!");
		for(Student i : students)
		{
			i.OutputStudent();
		}
		ServerSocket serverSocket = null;
	    try 
	    {
	        System.out.println("Binding to port " + SERVER_PORT + ", please wait  ...");
	        serverSocket = new ServerSocket(SERVER_PORT);
	        System.out.println("Server started: " + serverSocket);
	        System.out.println("Waiting for a client ...");
	        while (true) 
	        {
	            try {
	                Socket socket = serverSocket.accept();
	                System.out.println("Client accepted: " + socket);
	
	                ObjectOutputStream os = (ObjectOutputStream) socket.getOutputStream();
	                ObjectInputStream is = (ObjectInputStream) socket.getInputStream();
	                Student ch = null;
	                while (true) {
	                    ch = (Student) is.readObject(); // Receive data from client
	                    if (ch == null) {
	                        break;
	                    }
	                    os.writeObject(ch);// Send the results to client
	                }
	                socket.close();
	            } 
	            catch (IOException e) 
	            {
	                System.err.println(" Connection Error: " + e);
	            }
	        }
	    } 
	    catch (IOException e1) 
	    {
	        e1.printStackTrace();
	    } finally 
	    {
	        if (serverSocket != null) 
	        {
	            serverSocket.close();
	        }
	    }
	}
}
