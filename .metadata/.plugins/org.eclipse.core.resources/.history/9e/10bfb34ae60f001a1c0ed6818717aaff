package ObjectStudent;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetSocketAddress;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
 
public class ServerUDP {
    public final static int SERVER_PORT = 7;
    @SuppressWarnings("unchecked")
	public static void main(String[] args) {
        DatagramSocket ds = null;
        ArrayList<Student> students = new ArrayList<Student>();
        ArrayList<Student> studentskq = new ArrayList<Student>();
        try {
            System.out.println("Binding to port " + SERVER_PORT + ", please wait  ...");
            ds = new DatagramSocket(SERVER_PORT);
            System.out.println("Server started ");
            System.out.println("Waiting for messages from Client ... ");
            DatagramPacket dp = new DatagramPacket(new byte[65507],65507);
            ds.receive(dp);
            ByteArrayInputStream bis = new ByteArrayInputStream(dp.getData());
            ObjectInputStream ois = new ObjectInputStream(bis);               
            try {
				students = (ArrayList<Student>) ois.readObject();
				System.out.println("Nhan danh sach Student thanh cong..!");
				ActionFile AF = new ActionFile();
				studentskq = AF.LoadFileStudent("DataStudent.dat");
        		for(Student i : students)
        		{
        			studentskq.add(i);
        		}
        		Collections.sort(studentskq, new Comparator<Student>()
        		{
        			@Override
                    public int compare(Student o1, Student o2) {
                        if(o1.getMarkavge() - o2.getMarkavge() < 0)
                        	return 1;
                        else  if(o1.getMarkavge() - o2.getMarkavge() == 0)
                        	return 0;
                        else
                        	return -1;
                    }
        		});
        		AF.SaveFileStudent(studentskq, "DataStudent.dat");
        		System.out.println("Thong tin sinh vien..!");
        		for(Student i : students)
        		{
        			i.OutputStudent();
        		}
//        		ByteArrayOutputStream bao = new ByteArrayOutputStream();
//        		ObjectOutputStream oos = new ObjectOutputStream(bao);
//        		oos.writeObject(studentskq);
//        		byte[] data = bao.toByteArray();
//        		DatagramPacket dps = new DatagramPacket(data, data.length,new InetSocketAddress(dp.getAddress(), dp.getPort()));
//        		ds.send(dps);
				} 
                catch (ClassNotFoundException e) 
                {
					e.printStackTrace();
				}
        } 
        catch (IOException e)
        {
            e.printStackTrace();
        } 
        finally 
        {
            if (ds != null) {
                ds.close();
            }
        }
    }
}