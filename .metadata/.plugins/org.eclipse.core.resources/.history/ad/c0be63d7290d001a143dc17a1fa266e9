package ObjectStudent;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Scanner;
import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
 
public class Server implements Serializable {
	public final static int SERVER_PORT = 9999;
	public static void main(String[] args) throws IOException, ClassNotFoundException {
		ServerSocket serverSocket = null;
	    try 
	    {
	        System.out.println("Binding to port " + SERVER_PORT + ", please wait  ...");
	        serverSocket = new ServerSocket(SERVER_PORT);
	        System.out.println("Server started: " + serverSocket);
	        System.out.println("Waiting for a client ...");
	        while (true) 
	        {
	            try {
	                Socket socket = serverSocket.accept();
	                System.out.println("Client accepted: " + socket);
	                
	                ObjectOutputStream oos = new ObjectOutputStream(socket.getOutputStream());
	                ObjectInputStream ois = new ObjectInputStream(socket.getInputStream());
	                InputStream is = socket.getInputStream();
	                int n = is.read();
	                ArrayList<Student> students = new ArrayList<Student>();
	        		ActionFile AF = new ActionFile();
	        		students = AF.LoadFileStudent("DataStudent.dat");
	        		for(int i =0; i<n; i++)
	        		{
	        			Student st = (Student) ois.readObject();
	        			students.add(st);
	        		}
	        		Collections.sort(students, new Comparator<Student>()
	        		{
	        			@Override
	                    public int compare(Student o1, Student o2) {
	                        if(o1.getMarkavge() - o2.getMarkavge() < 0)
	                        	return 1;
	                        else  if(o1.getMarkavge() - o2.getMarkavge() == 0)
	                        	return 0;
	                        else
	                        	return -1;
	                    }
	        		});
	        		AF.SaveFileStudent(students, "DataStudent.dat");
	        		System.out.println("Thong tin sinh vien..!");
	        		for(Student i : students)
	        		{
	        			i.OutputStudent();
	        		}
	                for(Student i :students)
	                {
	                	oos.writeObject(i);
	                }
	                socket.close();
	            } 
	            catch (IOException e) 
	            {
	                System.err.println(" Connection Error: " + e);
	            }
	        }
	    } 
	    catch (IOException e1) 
	    {
	        e1.printStackTrace();
	    } finally 
	    {
	        if (serverSocket != null) 
	        {
	            serverSocket.close();
	        }
	    }
	}
}
